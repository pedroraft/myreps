/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/jurisdictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Jurisdiction List
         * @description Get list of supported Jurisdictions, a Jurisdiction is a state or municipality.
         */
        get: operations["jurisdiction_list_jurisdictions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jurisdictions/{jurisdiction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Jurisdiction Detail
         * @description Get details on a single Jurisdiction (e.g. state or municipality).
         */
        get: operations["jurisdiction_detail_jurisdictions__jurisdiction_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * People Search
         * @description Get list of people matching selected criteria.
         *
         *     Must provide either **jurisdiction**, **name**, or one or more **id** parameters.
         */
        get: operations["people_search_people_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people.geo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * People Geo
         * @description Get list of people currently representing a given location.
         *
         *     **Note:** Currently limited to state legislators and US Congress.  Governors & mayors are not included.
         */
        get: operations["people_geo_people_geo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bills Search
         * @description Search for bills matching given criteria.
         *
         *     Must either specify a jurisdiction or a full text query (q).  Additional parameters will
         *     futher restrict bills returned.
         */
        get: operations["bills_search_bills_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bills/ocd-bill/{openstates_bill_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bill Detail By Id
         * @description Obtain bill information by internal ID in the format ocd-bill/*uuid*.
         */
        get: operations["bill_detail_by_id_bills_ocd_bill__openstates_bill_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bills/{jurisdiction}/{session}/{bill_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Bill Detail
         * @description Obtain bill information based on (state, session, bill_id).
         */
        get: operations["bill_detail_bills__jurisdiction___session___bill_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/committees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Committee List */
        get: operations["committee_list_committees_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/committees/{committee_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Committee Detail
         * @description Get details on a single committee by ID.
         */
        get: operations["committee_detail_committees__committee_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Event List */
        get: operations["event_list_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Event Detail
         * @description Get details on a single event by ID.
         */
        get: operations["event_detail_events__event_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Metrics
         * @description Endpoint that serves Prometheus metrics.
         */
        get: operations["metrics_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AltIdentifier */
        AltIdentifier: {
            /**
             * Identifier
             * @example NCL000123
             */
            identifier: string;
            /**
             * Scheme
             * @example legacy_openstates
             */
            scheme: string;
        };
        /** AltName */
        AltName: {
            /**
             * Name
             * @example Auggie
             */
            name: string;
            /**
             * Note
             * @example nickname
             */
            note: string;
        };
        /** Bill */
        Bill: {
            /**
             * Id
             * @example ocd-bill/f0049138-1ad8-4506-a2a4-f4dd1251bbba
             */
            id: string;
            /**
             * Session
             * @example 2020
             */
            session: string;
            jurisdiction: components["schemas"]["CompactJurisdiction"];
            from_organization: components["schemas"]["Organization"];
            /**
             * Identifier
             * @example SB 113
             */
            identifier: string;
            /**
             * Title
             * @example Adopting a State Scorpion
             */
            title: string;
            /**
             * Classification
             * @default []
             * @example [
             *       "resolution"
             *     ]
             */
            classification: string[];
            /**
             * Subject
             * @default []
             * @example [
             *       "SCORPIONS",
             *       "SYMBOLS"
             *     ]
             */
            subject: string[];
            /**
             * Extras
             * @default {}
             * @example {}
             */
            extras: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Openstates Url
             * @example https://openstates.org/nc/bills/2019/HB1105/
             */
            openstates_url: string;
            /**
             * First Action Date
             * @default
             * @example 2020-01-01
             */
            first_action_date: string;
            /**
             * Latest Action Date
             * @default
             * @example 2020-02-01
             */
            latest_action_date: string;
            /**
             * Latest Action Description
             * @default
             * @example Introduced in House
             */
            latest_action_description: string;
            /**
             * Latest Passage Date
             * @default
             * @example 2020-03-01
             */
            latest_passage_date: string;
            /** Related Bills */
            related_bills?: components["schemas"]["RelatedBill"][];
            /** Abstracts */
            abstracts?: components["schemas"]["BillAbstract"][];
            /** Other Titles */
            other_titles?: components["schemas"]["BillTitle"][];
            /** Other Identifiers */
            other_identifiers?: components["schemas"]["BillIdentifier"][];
            /** Sponsorships */
            sponsorships?: components["schemas"]["BillSponsorship"][];
            /** Actions */
            actions?: components["schemas"]["BillAction"][];
            /** Sources */
            sources?: components["schemas"]["Link"][];
            /** Versions */
            versions?: components["schemas"]["BillDocumentOrVersion"][];
            /** Documents */
            documents?: components["schemas"]["BillDocumentOrVersion"][];
            /** Votes */
            votes?: components["schemas"]["VoteEvent"][];
        };
        /** BillAbstract */
        BillAbstract: {
            /**
             * Abstract
             * @example This bill designates a new state arachnid.
             */
            abstract: string;
            /**
             * Note
             * @example house abstract
             */
            note: string;
        };
        /** BillAction */
        BillAction: {
            /**
             * Id
             * Format: uuid
             * @example f0049138-1ad8-4506-a2a4-f4dd1251bbba
             */
            id: string;
            organization: components["schemas"]["Organization"];
            /**
             * Description
             * @example Passed 1st Reading
             */
            description: string;
            /**
             * Date
             * @example 2020-03-14
             */
            date: string;
            /**
             * Classification
             * @example [
             *       "passed"
             *     ]
             */
            classification: string[];
            /** Order */
            order: number;
            /** Related Entities */
            related_entities?: components["schemas"]["BillActionRelatedEntity"][];
        };
        /** BillActionRelatedEntity */
        BillActionRelatedEntity: {
            /**
             * Name
             * @example Senate Committee of the Whole
             */
            name: string;
            /**
             * Entity Type
             * @example organization
             */
            entity_type: string;
            /** Organization */
            organization?: components["schemas"]["Organization"];
            person?: components["schemas"]["CompactPerson"];
        };
        /** BillDocumentLink */
        BillDocumentLink: {
            /**
             * Url
             * @example https://example.com/doc.pdf
             */
            url: string;
            /**
             * Media Type
             * @example application/pdf
             */
            media_type: string;
        };
        /** BillDocumentOrVersion */
        BillDocumentOrVersion: {
            /**
             * Id
             * Format: uuid
             * @example f0049138-1ad8-4506-a2a4-f4dd1251bbba
             */
            id: string;
            /**
             * Note
             * @example Latest Version
             */
            note: string;
            /**
             * Date
             * @example 2020-10-01
             */
            date: string;
            /** Links */
            links: components["schemas"]["BillDocumentLink"][];
        };
        /** BillIdentifier */
        BillIdentifier: {
            /**
             * Identifier
             * @example HB 74
             */
            identifier: string;
        };
        /**
         * BillInclude
         * @description An enumeration.
         * @enum {string}
         */
        BillInclude: "sponsorships" | "abstracts" | "other_titles" | "other_identifiers" | "actions" | "sources" | "documents" | "versions" | "votes" | "related_bills";
        /** BillList */
        BillList: {
            /** Results */
            results: components["schemas"]["Bill"][];
            pagination: components["schemas"]["PaginationMeta"];
        };
        /**
         * BillSortOption
         * @description An enumeration.
         * @enum {string}
         */
        BillSortOption: "updated_asc" | "updated_desc" | "first_action_asc" | "first_action_desc" | "latest_action_asc" | "latest_action_desc";
        /** BillSponsorship */
        BillSponsorship: {
            /**
             * Id
             * Format: uuid
             * @example f0049138-1ad8-4506-a2a4-f4dd1251bbba
             */
            id: string;
            /**
             * Name
             * @example JONES
             */
            name: string;
            /**
             * Entity Type
             * @example person
             */
            entity_type: string;
            /** Organization */
            organization?: components["schemas"]["Organization"];
            person?: components["schemas"]["CompactPerson"];
            /** Primary */
            primary: boolean;
            /**
             * Classification
             * @example primary
             */
            classification: string;
        };
        /** BillTitle */
        BillTitle: {
            /**
             * Title
             * @example Designating the scorpion as the state arachnid.
             */
            title: string;
            /**
             * Note
             * @example short title
             */
            note: string;
        };
        /** Chamber */
        Chamber: {
            /**
             * Id
             * @example ocd-organization/32aab083-d7a0-44e0-9b95-a7790c542605
             */
            id: string;
            /**
             * Name
             * @example North Carolina General Assembly
             */
            name: string;
            /**
             * Classification
             * @example legislature
             */
            classification: string;
            /** Districts */
            districts?: components["schemas"]["Post"][];
        };
        /** Committee */
        Committee: {
            /**
             * Id
             * @example ocd-organization/aabbbbcc-dddd-eeee-ffff-0123456789ab
             */
            id: string;
            /**
             * Name
             * @example Health & Public Services
             */
            name: string;
            classification: components["schemas"]["CommitteeClassification"];
            /**
             * Parent Id
             * @example ocd-organization/aabbbbcc-dddd-eeee-ffff-999988887777
             */
            parent_id: string;
            /**
             * Extras
             * @example {
             *       "room": "Room 4B"
             *     }
             */
            extras: Record<string, never>;
            /** Memberships */
            memberships?: components["schemas"]["CommitteeMembership"][];
            /** Other Names */
            other_names?: components["schemas"]["AltName"][];
            /** Links */
            links?: components["schemas"]["Link"][];
            /** Sources */
            sources?: components["schemas"]["Link"][];
        };
        /**
         * CommitteeClassification
         * @description An enumeration.
         * @enum {string}
         */
        CommitteeClassification: "committee" | "subcommittee";
        /**
         * CommitteeInclude
         * @description An enumeration.
         * @enum {string}
         */
        CommitteeInclude: "memberships" | "links" | "sources";
        /** CommitteeList */
        CommitteeList: {
            /** Results */
            results: components["schemas"]["Committee"][];
            pagination: components["schemas"]["PaginationMeta"];
        };
        /** CommitteeMembership */
        CommitteeMembership: {
            /** Person Name */
            person_name: string;
            /** Role */
            role: string;
            person?: components["schemas"]["CompactPerson"];
        };
        /** CompactBill */
        CompactBill: {
            /**
             * Id
             * @example ocd-bill/12345678-0000-1111-2222-333344445555
             */
            id: string;
            /** Session */
            session: string;
            /** Identifier */
            identifier: string;
            /** Title */
            title: string;
        };
        /** CompactJurisdiction */
        CompactJurisdiction: {
            /**
             * Id
             * @example ocd-jurisdiction/country:us/state:nc/government
             */
            id: string;
            /**
             * Name
             * @example North Carolina
             */
            name: string;
            /** @example state */
            classification: components["schemas"]["JurisdictionClassification"];
        };
        /** CompactPerson */
        CompactPerson: {
            /**
             * Id
             * @example ocd-person/adb58f21-f2fd-4830-85b6-f490b0867d14
             */
            id: string;
            /**
             * Name
             * @example Angela Augusta
             */
            name: string;
            /**
             * Party
             * @example Democratic
             */
            party: string;
            current_role?: components["schemas"]["CurrentRole"];
        };
        /** CompactVoteEvent */
        CompactVoteEvent: {
            /**
             * Id
             * @example ocd-vote/12345678-0000-1111-2222-333344445555
             */
            id: string;
            /**
             * Motion Text
             * @example Shall the bill be passed?
             */
            motion_text: string;
        };
        /** CurrentRole */
        CurrentRole: {
            /**
             * Title
             * @example Senator
             */
            title: string;
            /** @example upper */
            org_classification: components["schemas"]["OrgClassification"];
            /**
             * District
             * @default
             * @example 3
             */
            district: string | number;
            /**
             * Division Id
             * @default
             * @example ocd-division/country:us/state:nc/sldu:3
             */
            division_id: string;
        };
        /** DataExport */
        DataExport: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Data Type */
            data_type: string;
            /** Url */
            url: string;
        };
        /** Event */
        Event: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            jurisdiction: components["schemas"]["CompactJurisdiction"];
            /** Description */
            description: string;
            /** Classification */
            classification: string;
            /** Start Date */
            start_date: string;
            /** End Date */
            end_date: string;
            /** All Day */
            all_day: boolean;
            /** Status */
            status: string;
            /** Upstream Id */
            upstream_id: string;
            /** Deleted */
            deleted: boolean;
            location?: components["schemas"]["EventLocation"];
            /** Links */
            links?: components["schemas"]["Link"][];
            /** Sources */
            sources?: components["schemas"]["Link"][];
            /** Media */
            media?: components["schemas"]["EventMedia"][];
            /** Documents */
            documents?: components["schemas"]["EventDocument"][];
            /** Participants */
            participants?: components["schemas"]["EventParticipant"][];
            /** Agenda */
            agenda?: components["schemas"]["EventAgendaItem"][];
        };
        /** EventAgendaItem */
        EventAgendaItem: {
            /** Description */
            description: string;
            /** Classification */
            classification: string[];
            /** Order */
            order: number;
            /** Subjects */
            subjects: string[];
            /** Notes */
            notes: string[];
            /** Extras */
            extras: Record<string, never>;
            /** Related Entities */
            related_entities: components["schemas"]["EventRelatedEntity"][];
            /** Media */
            media: components["schemas"]["EventMedia"][];
        };
        /** EventDocument */
        EventDocument: {
            /** Note */
            note: string;
            /** Date */
            date: string;
            /** Classification */
            classification: string;
            /** Links */
            links: components["schemas"]["Link"][];
        };
        /**
         * EventInclude
         * @description An enumeration.
         * @enum {string}
         */
        EventInclude: "links" | "sources" | "media" | "documents" | "participants" | "agenda";
        /** EventList */
        EventList: {
            /** Results */
            results: components["schemas"]["Event"][];
            pagination: components["schemas"]["PaginationMeta"];
        };
        /** EventLocation */
        EventLocation: {
            /** Name */
            name: string;
            /** Url */
            url: string;
        };
        /** EventMedia */
        EventMedia: {
            /** Note */
            note: string;
            /** Date */
            date: string;
            /** Offset */
            offset?: number;
            /** Classification */
            classification: string;
            /** Links */
            links: components["schemas"]["Link"][];
        };
        /** EventParticipant */
        EventParticipant: {
            /** Note */
            note: string;
            /**
             * Name
             * @example JONES
             */
            name: string;
            /**
             * Entity Type
             * @example person
             */
            entity_type: string;
            /** Organization */
            organization?: components["schemas"]["Organization"];
            person?: components["schemas"]["CompactPerson"];
        };
        /** EventRelatedEntity */
        EventRelatedEntity: {
            /** Note */
            note: string;
            /**
             * Name
             * @example JONES
             */
            name: string;
            /**
             * Entity Type
             * @example person
             */
            entity_type: string;
            /** Organization */
            organization?: components["schemas"]["Organization"];
            person?: components["schemas"]["CompactPerson"];
            bill?: components["schemas"]["CompactBill"];
            vote?: components["schemas"]["CompactVoteEvent"];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Jurisdiction */
        Jurisdiction: {
            /**
             * Id
             * @example ocd-jurisdiction/country:us/state:nc/government
             */
            id: string;
            /**
             * Name
             * @example North Carolina
             */
            name: string;
            /** @example state */
            classification: components["schemas"]["JurisdictionClassification"];
            /**
             * Division Id
             * @default
             * @example ocd-division/country:us/state:nc
             */
            division_id: string;
            /**
             * Url
             * @example https://nc.gov
             */
            url: string;
            /**
             * Latest Bill Update
             * Format: date-time
             */
            latest_bill_update: string;
            /**
             * Latest People Update
             * Format: date-time
             */
            latest_people_update: string;
            /** Organizations */
            organizations?: components["schemas"]["Chamber"][];
            /** Legislative Sessions */
            legislative_sessions?: components["schemas"]["LegislativeSession"][];
            /** Latest Runs */
            latest_runs?: components["schemas"]["RunPlan"][];
        };
        /**
         * JurisdictionClassification
         * @description An enumeration.
         * @enum {string}
         */
        JurisdictionClassification: "state" | "municipality" | "country";
        /**
         * JurisdictionInclude
         * @description An enumeration.
         * @enum {string}
         */
        JurisdictionInclude: "organizations" | "legislative_sessions" | "latest_runs";
        /** JurisdictionList */
        JurisdictionList: {
            /** Results */
            results: components["schemas"]["Jurisdiction"][];
            pagination: components["schemas"]["PaginationMeta"];
        };
        /** LegislativeSession */
        LegislativeSession: {
            /** Identifier */
            identifier: string;
            /** Name */
            name: string;
            /** Classification */
            classification: string;
            /** Start Date */
            start_date: string;
            /** End Date */
            end_date: string;
            /** Downloads */
            downloads?: components["schemas"]["DataExport"][];
        };
        /** Link */
        Link: {
            /**
             * Url
             * @example https://example.com/
             */
            url: string;
            /**
             * Note
             * @example homepage
             */
            note?: string;
        };
        /** Office */
        Office: {
            /**
             * Name
             * @example District Office
             */
            name: string;
            /**
             * Fax
             * @example 919-555-1234
             */
            fax?: string;
            /**
             * Voice
             * @example 919-555-0064
             */
            voice?: string;
            /**
             * Address
             * @example 212 Maple Lane; Raleigh NC; 27526
             */
            address?: string;
            /**
             * Classification
             * @example capitol
             */
            classification?: string;
        };
        /**
         * OrgClassification
         * @description An enumeration.
         * @enum {string}
         */
        OrgClassification: "legislature" | "executive" | "lower" | "upper" | "government";
        /** Organization */
        Organization: {
            /**
             * Id
             * @example ocd-organization/32aab083-d7a0-44e0-9b95-a7790c542605
             */
            id: string;
            /**
             * Name
             * @example North Carolina General Assembly
             */
            name: string;
            /**
             * Classification
             * @example legislature
             */
            classification: string;
        };
        /** PaginationMeta */
        PaginationMeta: {
            /**
             * Per Page
             * @example 20
             */
            per_page: number;
            /**
             * Page
             * @example 1
             */
            page: number;
            /**
             * Max Page
             * @example 3
             */
            max_page: number;
            /**
             * Total Items
             * @example 52
             */
            total_items: number;
        };
        /** Person */
        Person: {
            /**
             * Id
             * @example ocd-person/adb58f21-f2fd-4830-85b6-f490b0867d14
             */
            id: string;
            /**
             * Name
             * @example Angela Augusta
             */
            name: string;
            /**
             * Party
             * @example Democratic
             */
            party: string;
            current_role?: components["schemas"]["CurrentRole"];
            jurisdiction: components["schemas"]["CompactJurisdiction"];
            /**
             * Given Name
             * @example Angela
             */
            given_name: string;
            /**
             * Family Name
             * @example Augusta
             */
            family_name: string;
            /**
             * Image
             * @example https://example.com/ncimg/3.png
             */
            image: string;
            /**
             * Email
             * @example aperson@example.com
             */
            email: string;
            /**
             * Gender
             * @example female
             */
            gender: string;
            /**
             * Birth Date
             * @example 1960-05-04
             */
            birth_date: string;
            /**
             * Death Date
             * @example 2019-04-10
             */
            death_date: string;
            /**
             * Extras
             * @example {
             *       "profession": "Doctor"
             *     }
             */
            extras: Record<string, never>;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Openstates Url
             * @example https://openstates.org/person/amos-l-quick-iii-28NRPPfJA6FGVl9RrjpKjl/
             */
            openstates_url: string;
            /** Other Identifiers */
            other_identifiers?: components["schemas"]["AltIdentifier"][];
            /** Other Names */
            other_names?: components["schemas"]["AltName"][];
            /** Links */
            links?: components["schemas"]["Link"][];
            /** Sources */
            sources?: components["schemas"]["Link"][];
            /** Offices */
            offices?: components["schemas"]["Office"][];
        };
        /**
         * PersonInclude
         * @description An enumeration.
         * @enum {string}
         */
        PersonInclude: "other_names" | "other_identifiers" | "links" | "sources" | "offices";
        /** PersonList */
        PersonList: {
            /** Results */
            results: components["schemas"]["Person"][];
            pagination: components["schemas"]["PaginationMeta"];
        };
        /** PersonVote */
        PersonVote: {
            /**
             * Id
             * Format: uuid
             * @example f0049138-1ad8-4506-a2a4-f4dd1251bbba
             */
            id: string;
            /**
             * Option
             * @example no
             */
            option: string;
            /**
             * Voter Name
             * @example Wu
             */
            voter_name: string;
            voter?: components["schemas"]["CompactPerson"];
        };
        /** Post */
        Post: {
            /**
             * Label
             * @example 2
             */
            label: string;
            /**
             * Role
             * @example Senator
             */
            role: string;
            /**
             * Division Id
             * @example ocd-division/country:us/state:mn/sldu:4
             */
            division_id: string;
            /**
             * Maximum Memberships
             * @example 1
             */
            maximum_memberships: number;
        };
        /** RelatedBill */
        RelatedBill: {
            /**
             * Identifier
             * @example HB 123
             */
            identifier: string;
            /**
             * Legislative Session
             * @example 2022S1
             */
            legislative_session: string;
            /**
             * Relation Type
             * @example companion
             */
            relation_type: string;
        };
        /** RunPlan */
        RunPlan: {
            /** Success */
            success: boolean;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VoteCount */
        VoteCount: {
            /**
             * Option
             * @example yes
             */
            option: string;
            /**
             * Value
             * @example 48
             */
            value: number;
        };
        /** VoteEvent */
        VoteEvent: {
            /** Id */
            id: string;
            /**
             * Motion Text
             * @example Shall the bill be passed?
             */
            motion_text: string;
            /**
             * Motion Classification
             * @default []
             * @example [
             *       "passage"
             *     ]
             */
            motion_classification: string[];
            /**
             * Start Date
             * @example 2020-09-18
             */
            start_date: string;
            /**
             * Result
             * @example pass
             */
            result: string;
            /**
             * Identifier
             * @example HV #3312
             */
            identifier: string;
            /** Extras */
            extras: Record<string, never>;
            organization: components["schemas"]["Organization"];
            /** Votes */
            votes: components["schemas"]["PersonVote"][];
            /** Counts */
            counts: components["schemas"]["VoteCount"][];
            /** Sources */
            sources: components["schemas"]["Link"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    jurisdiction_list_jurisdictions_get: {
        parameters: {
            query?: {
                /** @description Filter returned jurisdictions by type. */
                classification?: components["schemas"]["JurisdictionClassification"];
                /** @description Additional information to include in response. */
                include?: components["schemas"]["JurisdictionInclude"][];
                page?: number;
                per_page?: number;
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JurisdictionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    jurisdiction_detail_jurisdictions__jurisdiction_id__get: {
        parameters: {
            query?: {
                /** @description Additional includes for the Jurisdiction response. */
                include?: components["schemas"]["JurisdictionInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path: {
                jurisdiction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Jurisdiction"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    people_search_people_get: {
        parameters: {
            query?: {
                /** @description Filter by jurisdiction name or id. */
                jurisdiction?: string;
                /** @description Filter by name, case-insensitive match. */
                name?: string;
                /** @description Filter by id, can be specified multiple times for multiple people. */
                id?: string[];
                /** @description Filter by current role. */
                org_classification?: components["schemas"]["OrgClassification"];
                /** @description Filter by district name. */
                district?: string;
                /** @description Additional information to include in response. */
                include?: components["schemas"]["PersonInclude"][];
                page?: number;
                per_page?: number;
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    people_geo_people_geo_get: {
        parameters: {
            query: {
                /** @description Latitude of point. */
                lat: number;
                /** @description Longitude of point. */
                lng: number;
                /** @description Additional information to include in the response. */
                include?: components["schemas"]["PersonInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bills_search_bills_get: {
        parameters: {
            query?: {
                /** @description Filter by jurisdiction name or ID. */
                jurisdiction?: string;
                /** @description Filter by session identifier. */
                session?: string;
                /** @description Filter by chamber of origination. */
                chamber?: string;
                /** @description Filter to only include bills with this identifier. */
                identifier?: string[];
                /** @description Filter by classification, e.g. bill or resolution */
                classification?: string;
                /** @description Filter by one or more subjects. */
                subject?: string[];
                /** @description Filter to only include bills with updates since a given date. */
                updated_since?: string;
                /** @description Filter to only include bills created since a given date. */
                created_since?: string;
                /** @description Filter to only include bills with an action since a given date. */
                action_since?: string;
                /** @description Desired sort order for bill results. */
                sort?: components["schemas"]["BillSortOption"];
                /** @description Filter to only include bills sponsored by a given name or person ID. */
                sponsor?: string;
                /** @description Filter matched sponsors to only include particular types of sponsorships. */
                sponsor_classification?: string;
                /** @description Filter by full text search term. */
                q?: string;
                /** @description Additional information to include in response. */
                include?: components["schemas"]["BillInclude"][];
                page?: number;
                per_page?: number;
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bill_detail_by_id_bills_ocd_bill__openstates_bill_id__get: {
        parameters: {
            query?: {
                include?: components["schemas"]["BillInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path: {
                openstates_bill_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bill"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bill_detail_bills__jurisdiction___session___bill_id__get: {
        parameters: {
            query?: {
                include?: components["schemas"]["BillInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path: {
                jurisdiction: string;
                session: string;
                bill_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bill"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    committee_list_committees_get: {
        parameters: {
            query?: {
                /** @description Filter by jurisdiction name or ID. */
                jurisdiction?: string;
                classification?: components["schemas"]["CommitteeClassification"];
                /** @description ocd-organization ID of parent committee. */
                parent?: string;
                /** @description Chamber of committee, generally upper or lower. */
                chamber?: components["schemas"]["OrgClassification"];
                /** @description Additional includes for the Committee response. */
                include?: components["schemas"]["CommitteeInclude"][];
                apikey?: string;
                page?: number;
                per_page?: number;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommitteeList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    committee_detail_committees__committee_id__get: {
        parameters: {
            query?: {
                /** @description Additional includes for the Committee response. */
                include?: components["schemas"]["CommitteeInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path: {
                committee_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Committee"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    event_list_events_get: {
        parameters: {
            query?: {
                /** @description Filter by jurisdiction name or ID. */
                jurisdiction?: string;
                /** @description Return events marked as deleted? */
                deleted?: boolean;
                /** @description Limit results to those starting before a given datetime. */
                before?: string;
                /** @description Limit results to those starting before a given datetime. */
                after?: string;
                /** @description Limit results to events with associated bills. */
                require_bills?: boolean;
                /** @description Additional includes for the Event response. */
                include?: components["schemas"]["EventInclude"][];
                apikey?: string;
                page?: number;
                per_page?: number;
            };
            header?: {
                "x-api-key"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    event_detail_events__event_id__get: {
        parameters: {
            query?: {
                /** @description Additional includes for the Event response. */
                include?: components["schemas"]["EventInclude"][];
                apikey?: string;
            };
            header?: {
                "x-api-key"?: string;
            };
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    metrics_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
